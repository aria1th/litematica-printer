apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

int mcVersion = project.mcVersion

preprocess {
    mcVersion = vars.get()["MC"] as Integer
}

String MIXIN_CONFIG_PATH = 'litematica-printer.mixins.json'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}
JavaVersion MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven { url 'https://masa.dy.fi/maven' }
    maven { url = "https://www.cursemaven.com" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricapi_version}"
	modCompileOnly files("../../external/${project.essentialclient_filename}") // shared external files.
    // check project.malilib_projectid and project.malilib_fileid in gradle.properties.
    // modImplementation "curse.maven:malilib-${project.malilib_projectid}:${project.malilib_fileid}"
    // if malilib projectid and fileid are not defined, try to find malilib_filename in gradle.properties.
    if (!project.hasProperty("malilib_projectid")) {
        modImplementation files("../../external/${project.malilib_filename}")
        // 1.20.1 then kosmolot-unofficial-malilib-fabric-1.20-0.15.4+ksm.3.jar
    }
    else {
        if (mcVersion >= 12005) {
            modImplementation "com.github.sakura-ryoko:malilib:${project.malilib_fileid}"
        }
        else {
            modImplementation "curse.maven:malilib-${project.malilib_projectid}:${project.malilib_fileid}"
        }
        //modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version_out}:${project.malilib_version}"
    }
    // check project.litematica_projectid and project.litematica_fileid in gradle.properties.
	// modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
    if (!project.hasProperty("litematica_projectid")) {
        modImplementation files("../../external/${project.litematica_filename}")
        // 1.20.1 then kosmolot-unofficial-litematica-fabric-1.20-0.14.3+ksm.3.jar
    }
    else {
        if (mcVersion >= 12005) {
            modImplementation "com.github.sakura-ryoko:litematica:${project.litematica_fileid}"
        }
        else {
            modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
        }
        //modImplementation "fi.dy.masa.litematica:litematica-fabric-${project.minecraft_version_out}:${project.litematica_version}"
    }

    //	// [FEATURE] MIXIN_AUDITOR
    //modRuntimeOnly 'me.fallenbreath:mixin-auditor:0.1.0'
	//include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))
	include(annotationProcessor(implementation("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
}

loom {
    def commonVmArgs = ['-Dmixin.debug.export=true', '-Dmixin.debug.countInjections=true']
    runConfigs.configureEach {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs commonVmArgs
    }
//	// [FEATURE] MIXIN_AUDITOR
//	runs {
//		def auditVmArgs = [*commonVmArgs, '-DmixinAuditor.audit=true']
//		serverMixinAudit {
//			server()
//			vmArgs auditVmArgs
//			ideConfigGenerated false
//		}
//	}
}

//remapJar {
    //remapperIsolation = true
//}

String modVersionSuffix = ''
String artifactVersion = project.mod_version
String artifactVersionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    modVersionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
    artifactVersionSuffix = '-SNAPSHOT'  // A non-release artifact is always a SNAPSHOT artifact
}
String fullModVersion = project.mod_version + modVersionSuffix
String fullProjectVersion, fullArtifactVersion

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
    // move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
    base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version
    fullProjectVersion = 'v' + project.mod_version + modVersionSuffix
    fullArtifactVersion = artifactVersion + artifactVersionSuffix
} else {
    base.archivesName = project.archives_base_name
    fullProjectVersion = 'v' + project.mod_version + '-mc' + project.minecraft_version + modVersionSuffix
    fullArtifactVersion = artifactVersion + '-mc' + project.minecraft_version + artifactVersionSuffix
}
version = fullProjectVersion

processResources {
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", fullModVersion
    inputs.property "minecraft_dependency", project.minecraft_dependency

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id": project.mod_id,
                "name": project.mod_name,
                "version": fullModVersion,
                "minecraft_dependency": project.minecraft_dependency,
        ]
        expand valueMap
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}") }
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
        // suppressed "source/target value 8 is obsolete and will be removed in a future release"
        options.compilerArgs << '-Xlint:-options'
    }
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}
