// common.gradle is a file that called separately by each module.
plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.replaymod.preprocess' version '6989e16efc'
}

int mcVersion = 1

preprocess {
    mcVersion = vars.get()["MC"]
    tabIndentation = true
}

if (mcVersion >= 11800) {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}
else if (mcVersion >= 11700) {
	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
}
else {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}


archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://jitpack.io" }
    maven { url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    maven { url 'https://masa.dy.fi/maven' }
    maven { url = "https://www.cursemaven.com" }
	maven {
		url "https://maven.terraformersmc.com/releases/"
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricapi_version}"
	modCompileOnly files("../../external/${project.essentialclient_filename}") // shared external files.
    // check project.malilib_projectid and project.malilib_fileid in gradle.properties.
    // modImplementation "curse.maven:malilib-${project.malilib_projectid}:${project.malilib_fileid}"
    // if malilib projectid and fileid are not defined, try to find malilib_filename in gradle.properties.
    if (!project.hasProperty("malilib_projectid")) {
        modImplementation files("../../external/${project.malilib_filename}")
        // 1.20.1 then kosmolot-unofficial-malilib-fabric-1.20-0.15.4+ksm.3.jar
    }
    else {
        modImplementation "curse.maven:malilib-${project.malilib_projectid}:${project.malilib_fileid}"
    }
    // check project.litematica_projectid and project.litematica_fileid in gradle.properties.
	// modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
    if (!project.hasProperty("litematica_projectid")) {
        modImplementation files("../../external/${project.litematica_filename}")
        // 1.20.1 then kosmolot-unofficial-litematica-fabric-1.20-0.14.3+ksm.3.jar
    }
    else {
        modImplementation "curse.maven:litematica-${project.litematica_projectid}:${project.litematica_fileid}"
    }
	annotationProcessor "com.github.LlamaLad7:MixinExtras:0.1.1"
}

processResources {
	inputs.property "version", project.mod_version
    // {$argument} exists in src/main/resources/fabric.mod.json, then it will be replaced with the value of the argument.
	filesMatching("fabric.mod.json") {
        def map = [
            "version": version,
            "minecraft_dependency": project.minecraft_version_out
        ]
        expand map
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
    if (mcVersion >= 11800) {
        it.options.release = 17
    }
    else if (mcVersion >= 11700) {
        it.options.release = 16
    }
    else {
        it.options.release = 8
    }
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
